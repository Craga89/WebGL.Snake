function MouseHandler(elem) {
	this._elem = elem || window;
	this._x = 0;
	this._y = 0;
	this._lastX = 0;
	this._lastY = 0;
	this._diffX = 0;
	this._diffY = 0;

	this.init();
}

MouseHandler.prototype = {
	init: function() {
		var self = this;

		// Bind mousemove
		self._elem.addEventListener('mousemove', function(event) {
			self._diffX = self._lastX - event.pageX;
			self._diffY = self._lastY - event.pageY;
			self._lastX = self._x;
			self._lastY = self._y;
			self._x = event.pageX;
			self._y = event.pageY;
		},
		false);
	},

	bind: function(callback, click) {
		var self = this;

		function handler() {
			callback.call(self,
				{ x: self._x, y: self._y },
				{ x: self._diffX, y: self._diffY }
			);
		}

		// Only activate callback onclick if enabled
		if(click) {
			self._elem.addEventListener('mousedown', function() {
				self._elem.addEventListener('mousemove', handler, false);
				window.addEventListener('mouseup', function() {
					self._elem.removeEventListener('mousemove', handler);
				}, false);
			});
		}

		// Othewrwise just bind directly
		else { self._elem.addEventListener('mousemove', handler, false); }

		return this;
	},

	scroll: function(callback) {
		var self = this;
		
		self._elem.addEventListener('mousewheel', function(event) {
			callback.call(self, {
				dir: event.wheelDeltaY > 0 ? 1 : -1,
				x: event.wheelDeltaX, y: event.wheelDeltaY
			});
		});

		return this;
	}
}

function KeyboardHandler(elem) {
	this._elem = elem || window;
	this._keys = {};
	this._keyCallbacks = {};

	this.ARROW_DOWN = 40;
	this.ARROW_UP = 38;
	this.ARROW_LEFT = 37;
	this.ARROW_RIGHT = 39;

	this.RETURN = 13;
	this.BACKSPACE = 8;
	this.ESCAPE = 27;
	this.DELETE = 46;
	this.SPACE = 32;

	this.P = 80;
	this.A = 65;
	this.V

	this.init();
}

KeyboardHandler.prototype = {
	init: function() {
		var self = this;

		function keyHandler(event) {
			var key = event.keyCode;


			console.log(key)
			
			// Set key state
			self._keys[key] = event.type === 'keydown';

			// Fire bound callback if enabled
			if(self._keys[key] && self._keyCallbacks[key]) {
				self._keyCallbacks[key](event.shiftKey, event.ctrlKey, event.altKey);
			}

			event.stopPropagation();
		}
		this._elem.addEventListener('keyup', keyHandler, false);
		this._elem.addEventListener('keydown', keyHandler, false);

		return this;
	},

	bind: function(key, callback) {
		this._keyCallbacks[ key ] = callback;

		return this;
	},

	unbind: function(key) {
		delete this._keyCallbacks[ key ];

		return this;
	},

	isPressed: function(key) { return !!this._keys[key]; }
}